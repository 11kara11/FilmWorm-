from aiogram import Dispatcher, types
from aiogram.types import Message
from create_bot import dp, bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from films_search import Films
from users import User
from usertofilm import UserToFilm
import db_session


Films = Films()
user = User()
user_to_film = UserToFilm()
button_information_film = KeyboardButton('üß†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µüß†')
button_rec_on_param = KeyboardButton('üçø—Ç–∞–π—Ç–ª—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–ºüçø')
button_rec_for_user = KeyboardButton('üéÅ—Ç–∞–π—Ç–ª –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüéÅ')
buttons = ReplyKeyboardMarkup(resize_keyboard=True).row(button_information_film, button_rec_on_param)
buttons.add(button_rec_for_user)

button_anime = KeyboardButton('–∞–Ω–∏–º–µ')
button_film = KeyboardButton('—Ñ–∏–ª—å–º—ã')
button_serial = KeyboardButton('—Å–µ—Ä–∏–∞–ª—ã')
buttons_type = ReplyKeyboardMarkup(resize_keyboard=True).row(button_anime, button_film)
buttons_type.add(button_serial)

buttons_genre = [
    KeyboardButton('–±–æ–µ–≤–∏–∫'),
    KeyboardButton('–∞–Ω–∏–º–µ'),
    KeyboardButton('–±–∏–æ–≥—Ä–∞—Ñ–∏—è'),
    KeyboardButton('–¥–µ—Ç–µ–∫—Ç–∏–≤'),
    KeyboardButton('–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π'),
    KeyboardButton('–∫–æ–º–µ–¥–∏—è'),
    KeyboardButton('–¥—Ä–∞–º–∞'),
    KeyboardButton('–∫—Ä–∏–º–∏–Ω–∞–ª'),
    KeyboardButton('–º–µ–ª–æ–¥—Ä–∞–º–∞'),
    KeyboardButton('–º—É–ª—å—Ç—Ñ–∏–ª—å–º'),
    KeyboardButton('–º—é–∑–∏–∫–ª'),
    KeyboardButton('–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'),
    KeyboardButton('—Å–ø–æ—Ä—Ç'),
    KeyboardButton('—Ç—Ä–∏–ª–ª–µ—Ä'),
    KeyboardButton('—É–∂–∞—Å—ã'),
    KeyboardButton('—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'),
    KeyboardButton('—Ñ—ç–Ω—Ç–µ–∑–∏'),

]
reply_genre_buttons = ReplyKeyboardMarkup().add(*buttons_genre)


class Choose(StatesGroup):
    pass


@dp.message_handler(lambda message: '–ø—Ä–∏–≤–µ—Ç' in message.text.lower())
async def reaction_buttons_f2(message: types.Message):
    if message.text == '–ü—Ä–∏–≤–µ—Ç':
        await message.reply('—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    else:
        print(message.text)


def register_handler_f2(dp: Dispatcher):
    dp.register_message_handler(reaction_buttons_f2)
    print(1)
