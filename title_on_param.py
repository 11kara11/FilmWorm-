from aiogram import Dispatcher, types
from aiogram.types import Message
from create_bot import dp, bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from films_search import Films
from users import User
from usertofilm import UserToFilm
import db_session
import requests

Films = Films()
user = User()
user_to_film = UserToFilm()
button_information_film = KeyboardButton('üß†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µüß†')
button_rec_on_param = KeyboardButton('üçø—Ç–∞–π—Ç–ª—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–ºüçø')
button_rec_for_user = KeyboardButton('üéÅ—Ç–∞–π—Ç–ª –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüéÅ')
buttons = ReplyKeyboardMarkup(resize_keyboard=True).row(button_information_film, button_rec_on_param)
buttons.add(button_rec_for_user)


buttons_genre = [
    KeyboardButton('–±–æ–µ–≤–∏–∫'),
    KeyboardButton('–∞–Ω–∏–º–µ'),
    KeyboardButton('–±–∏–æ–≥—Ä–∞—Ñ–∏—è'),
    KeyboardButton('–¥–µ—Ç–µ–∫—Ç–∏–≤'),
    KeyboardButton('–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π'),
    KeyboardButton('–∫–æ–º–µ–¥–∏—è'),
    KeyboardButton('–¥—Ä–∞–º–∞'),
    KeyboardButton('–∫—Ä–∏–º–∏–Ω–∞–ª'),
    KeyboardButton('–º–µ–ª–æ–¥—Ä–∞–º–∞'),
    KeyboardButton('–º—É–ª—å—Ç—Ñ–∏–ª—å–º'),
    KeyboardButton('–º—é–∑–∏–∫–ª'),
    KeyboardButton('–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'),
    KeyboardButton('—Å–ø–æ—Ä—Ç'),
    KeyboardButton('—Ç—Ä–∏–ª–ª–µ—Ä'),
    KeyboardButton('—É–∂–∞—Å—ã'),
    KeyboardButton('—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'),
    KeyboardButton('—Ñ—ç–Ω—Ç–µ–∑–∏'),

]
button_continue = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
reply_genre_buttons = ReplyKeyboardMarkup().add(button_continue)
reply_genre_buttons.add(*buttons_genre)
genres = [
    '–±–æ–µ–≤–∏–∫', '–∞–Ω–∏–º–µ', '–±–∏–æ–≥—Ä–∞—Ñ–∏—è', '–¥–µ—Ç–µ–∫—Ç–∏–≤', '–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', '–∫–æ–º–µ–¥–∏—è', '–¥—Ä–∞–º–∞', '–∫—Ä–∏–º–∏–Ω–∞–ª', '–º–µ–ª–æ–¥—Ä–∞–º–∞',
    '–º—É–ª—å—Ç—Ñ–∏–ª—å–º', '–º—é–∑–∏–∫–ª', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '—Å–ø–æ—Ä—Ç', '—Ç—Ä–∏–ª–ª–µ—Ä', '—É–∂–∞—Å—ã', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '—Ñ—ç–Ω—Ç–µ–∑–∏',
]

button_skip = KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
reply_button_skip = ReplyKeyboardMarkup(resize_keyboard=True).add(button_skip)


class Choose(StatesGroup):
    choose_genre = State()
    choose_year = State()
    choose_country = State()


@dp.message_handler(lambda message: 'üçø—Ç–∞–π—Ç–ª—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–ºüçø' in message.text.lower())
async def reaction_buttons_f2(message: types.Message, state: FSMContext):
    if message.text == 'üçø—Ç–∞–π—Ç–ª—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–ºüçø':
        await message.reply('–í—ã–±–µ—Ä–∏ –¥–æ 4 –∂–∞–Ω—Ä–æ–≤, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞',
                            reply_markup=reply_genre_buttons)
        await state.finish()
        await Choose.choose_genre.set()
        await state.update_data(params={"genres.name": []})
    else:
        print(message.text)


@dp.message_handler(lambda message: message.text in genres or message.text.lower() == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                    state=Choose.choose_genre)
async def get_genres(message: types.Message, state: FSMContext):
    params = await state.get_data('params')
    print(params)
    if message.text.lower() == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        if 1 <= len(params['params']['genres.name']) <= 4:
            await Choose.choose_year.set()
            await message.reply('–Ω–∞–ø–∏—à–∏ –º–Ω–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä',
                                reply_markup=reply_button_skip)
            print(params)
        else:
            await message.reply('–≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã 1 –∂–∞–Ω—Ä')
    else:
        print(message.text)
    if message.text in genres:
        if len(params['params']['genres.name']) < 4:
            if message.text not in params['params']['genres.name']:
                params['params']['genres.name'].append(message.text)
                await state.update_data(params=params['params'])
                await message.reply(f'–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã:\n{params["params"]["genres.name"]}')
                print(params)
            else:
                await message.reply('—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –∂–∞–Ω—Ä, –¥–∞–≤–∞–π –¥—Ä—É–≥–æ–π')
        if len(params['params']['genres.name']) == 4:
            await message.reply('–Ω–∞–ø–∏—à–∏ –º–Ω–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä',
                                reply_markup=reply_button_skip)
            await Choose.choose_year.set()
            print(params)


@dp.message_handler(state=Choose.choose_year)
async def get_year(message: types.Message, state: FSMContext):
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.reply(
            '–Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–∏–≤–ª—å–Ω–æ, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç',
            reply_markup=reply_button_skip)
        await state.update_data(year=None)
        await Choose.choose_country.set()
    elif str(message.text).isdigit():
        await message.reply(
            '–Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–∏–≤–ª—å–Ω–æ, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç',
            reply_markup=reply_button_skip)
        await state.update_data(year=int(message.text))
        await Choose.choose_country.set()
    else:
        await message.reply('—Ö–º, –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ –Ω–µ –≥–æ–¥')
        await Choose.choose_year.set()


@dp.message_handler(state=Choose.choose_country)
async def get_country(message: types.Message, state: FSMContext):
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(country=None)
    else:
        await state.update_data(country=message.text)
    await message.reply('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫', reply_markup=buttons)
    data = await state.get_data()
    params = data['params']
    year = data['year']
    country = data['country']
    await state.finish()
    try:
        title_json = await Films.get_title_on_param(params, year, country)
        full_name = title_json['docs'][0]['name']
        description = title_json['docs'][0]['description']
        year = title_json['docs'][0]['year']
        id_film = title_json['docs'][0]['id']
        poster_link = title_json['docs'][0]['poster']['url']
        rating = title_json['docs'][0]['rating']['kp']
        poster = requests.get(poster_link)
        with open('img.png', 'wb') as photo:
            photo.write(poster.content)

        await state.update_data(i=0)
        await state.update_data(title_json=title_json)
        button_like = InlineKeyboardButton('like', callback_data=f'buttonlikedparam_{id_film}')
        button_next = InlineKeyboardButton('next', callback_data='next')
        button_back = InlineKeyboardButton('back', callback_data='back')
        buttons_inline = InlineKeyboardMarkup().add(button_like, button_next, button_back)
        await bot.send_photo(chat_id=message.chat.id, photo=InputFile('img.png'),
                             caption=f'üåü{full_name}üåü\nüí•{description}üí•\n–≥–æ–¥ - üåú{year}üåõ\n üìà—Ä–µ–π—Ç–∏–Ω–≥ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ - {rating} üìà',
                             reply_markup=buttons_inline, )
    except Exception:
        await state.finish()
        await message.reply('–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–π—Ç–ª', reply_markup=buttons)
    # print(title_json)


@dp.callback_query_handler(lambda callback_query: "buttonlikedparam" in callback_query.data)
async def process_callback_buttonlike_param(callback_query: types.CallbackQuery):
    print('like')
    await bot.send_message(chat_id=callback_query.from_user.id, text='–Ø –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ—Ç —Ç–∞–π—Ç–ª –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è :)')
    data = callback_query.data.split('_')[1]
    db_sess = db_session.create_session()
    if db_sess.query(UserToFilm).filter(
            UserToFilm.id == callback_query.from_user.id, UserToFilm.film_id == data).count() < 1:
        print('add new title in db')
        user_to_film.id = callback_query.from_user.id
        user_to_film.film_id = data
        db_sess.add(user_to_film)
        db_sess.commit()
        db_sess.close()
    await callback_query.answer()
    db_sess.close()


@dp.callback_query_handler(lambda callback_query: "next" == callback_query.data)
async def process_callback_next(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    title_json = data['title_json']
    i = data['i']
    try:
        if i <= 50:
            full_name = title_json['docs'][i + 1]['name']
            description = title_json['docs'][i + 1]['description']
            year = title_json['docs'][i + 1]['year']
            id_film = title_json['docs'][i + 1]['id']
            poster_link = title_json['docs'][i + 1]['poster']['url']
            rating = title_json['docs'][i + 1]['rating']['kp']
            poster = requests.get(poster_link)
            with open('img.png', 'wb') as photo:
                photo.write(poster.content)
            button_like = InlineKeyboardButton('like', callback_data=f'buttonliked_{id_film}')
            button_next = InlineKeyboardButton('next', callback_data='next')
            button_back = InlineKeyboardButton('back', callback_data='back')
            buttons_inline = InlineKeyboardMarkup().add(button_like, button_next, button_back)
            await bot.send_photo(chat_id=callback_query.from_user.id, photo=InputFile('img.png'),
                                 caption=f'üåü{full_name}üåü\nüí•{description}üí•\n–≥–æ–¥ - üåú{year}üåõ\n üìà—Ä–µ–π—Ç–∏–Ω–≥ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ - {rating} üìà',
                                 reply_markup=buttons_inline, )
            await state.update_data(i=i + 1)
        else:
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text='—è –Ω–µ –º–æ–≥—É –¥–∞–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —Å–¥–µ–ª–∞–π –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', reply_markup=buttons)
    except Exception:
        await bot.send_message(chat_id=callback_query.from_user.id, text='—Ç–∞–π—Ç–ª—ã –∫–æ–Ω—á–∏–ª–∏—Å—å', reply_markup=buttons)


@dp.callback_query_handler(lambda callback_query: "back" in callback_query.data)
async def process_callback_back(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    title_json = data['title_json']
    i = data['i']
    try:
        if i <= 50:
            full_name = title_json['docs'][i - 1]['name']
            description = title_json['docs'][i - 1]['description']
            year = title_json['docs'][i - 1]['year']
            id_film = title_json['docs'][i - 1]['id']
            poster_link = title_json['docs'][i - 1]['poster']['url']
            rating = title_json['docs'][i - 1]['rating']['kp']
            poster = requests.get(poster_link)
            with open('img.png', 'wb') as photo:
                photo.write(poster.content)
            button_like = InlineKeyboardButton('like', callback_data=f'buttonliked_{id_film}')
            button_next = InlineKeyboardButton('next', callback_data='next')
            button_back = InlineKeyboardButton('back', callback_data='back')
            buttons_inline = InlineKeyboardMarkup().add(button_like, button_next, button_back)
            await bot.send_photo(chat_id=callback_query.from_user.id, photo=InputFile('img.png'),
                                 caption=f'üåü{full_name}üåü\nüí•{description}üí•\n–≥–æ–¥ - üåú{year}üåõ\n üìà—Ä–µ–π—Ç–∏–Ω–≥ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ - {rating} üìà',
                                 reply_markup=buttons_inline, )
            await state.update_data(i=i - 1)
        else:
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text='—è –Ω–µ –º–æ–≥—É –¥–∞–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —Å–¥–µ–ª–∞–π –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', reply_markup=buttons)
    except Exception:
        await bot.send_message(chat_id=callback_query.from_user.id, text='—Ç–∞–π—Ç–ª—ã –∫–æ–Ω—á–∏–ª–∏—Å—å', reply_markup=buttons)
        await state.finish()


def register_handler_f2(dp: Dispatcher):
    dp.register_message_handler(reaction_buttons_f2)
    dp.register_message_handler(get_genres)
    dp.register_message_handler(get_year)
    dp.register_message_handler(get_country)
    dp.register_poll_handler(process_callback_buttonlike_param)
    dp.register_poll_handler(process_callback_next)
    dp.register_poll_handler(process_callback_back)
    print(1)
