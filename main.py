from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

from config import TOKEN_aiogram
from films_search import Films

storage = MemoryStorage()
bot = Bot(token=TOKEN_aiogram)
dp = Dispatcher(bot, storage=storage)

Films = Films()

button_information_film = KeyboardButton('üß†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µüß†')
button_rec_on_param = KeyboardButton('üçø—Ç–∞–π—Ç–ª—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–ºüçø')
button_rec_for_user = KeyboardButton('üéÅ—Ç–∞–π—Ç–ª –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüéÅ')
buttons = ReplyKeyboardMarkup(resize_keyboard=True).row(button_information_film, button_rec_on_param)
buttons.add(button_rec_for_user)

button_anime = KeyboardButton('–∞–Ω–∏–º–µ')
button_film = KeyboardButton('—Ñ–∏–ª—å–º—ã')
button_serial = KeyboardButton('—Å–µ—Ä–∏–∞–ª—ã')
buttons_type = ReplyKeyboardMarkup(resize_keyboard=True).row(button_anime, button_film)
buttons_type.add(button_serial)


class Choose_inf_of_title(StatesGroup):
    film_name = State()
    type_industry = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    print(user_id)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç!\n –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã!\n {message.from_user.id}",
                        reply_markup=buttons)


@dp.message_handler()
async def reaction_buttons(message: types.Message):
    if message.text == '–ü—Ä–∏–≤–µ—Ç':
        await message.reply(f'–ø–æ–∫–∞(')
    if message.text == 'üß†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µüß†':
        await message.reply('–ù–∞–ø–∏—à–∏ –º–Ω–µ –æ—Ç—Ä–∞—Å–ª—å –∫–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏', reply_markup=buttons_type)
        await Choose_inf_of_title.type_industry.set()

        # full_name, description, year, poster, rating = Films.get_film_information(message)
        # await message.reply('—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if message.text == 'üçø—Ç–∞–π—Ç–ª—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–ºüçø':
        await message.reply('—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if message.text == 'üéÅ—Ç–∞–π—Ç–ª –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüéÅ':
        await message.reply('—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@dp.message_handler(state=Choose_inf_of_title.type_industry)
async def get_type_industry(message: types.Message, state: FSMContext):
    if message.text == '–∞–Ω–∏–º–µ':
        type_industry = 'anime'
    elif message.text == '—Ñ–∏–ª—å–º—ã':
        type_industry = 'movie'
    elif message.text == '—Å–µ—Ä–∏–∞–ª—ã':
        type_industry = 'tv-series'
    else:
        await message.reply('–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø')

    await state.update_data(type_industry=type_industry)
    await message.reply(
        '–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ üåû. –î–ª—è –±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞, —Å–æ–≤–µ—Ç—É—é –Ω–∞–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æü§î',
        reply_markup=ReplyKeyboardRemove())
    await Choose_inf_of_title.film_name.set()


@dp.message_handler(state=Choose_inf_of_title.film_name)
async def get_film_inf(message: types.Message, state: FSMContext):
    await state.update_data(film=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æüëç, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫')
    data = await state.get_data()
    film = data['film']
    type_industry = data['type_industry']
    await state.finish()
    print('get name')
    full_name, description, year, poster, rating = Films.get_film_information(film, type_industry)
    if full_name == False:
        await message.reply('–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º', reply_markup=buttons)
    else:
        await bot.send_photo(chat_id=message.chat.id, photo=InputFile('img.png'),
                             caption=f'üåü{full_name}üåü\nüí•{description}üí•\n–≥–æ–¥ - üåú{year}üåõ\n üìà—Ä–µ–π—Ç–∏–Ω–≥ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ - {rating} üìà',
                             reply_markup=buttons, )
    print(message.from_user.id)


if __name__ == '__main__':
    executor.start_polling(dp)
