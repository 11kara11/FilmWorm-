from aiogram import Dispatcher, types
from create_bot import dp, bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from films_search import Films
from users import User
from usertofilm import UserToFilm
import db_session

button_information_film = KeyboardButton('üß†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µüß†')
button_rec_on_param = KeyboardButton('üçø—Ç–∞–π—Ç–ª—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–ºüçø')
button_rec_for_user = KeyboardButton('üéÅ—Ç–∞–π—Ç–ª –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüéÅ')
buttons = ReplyKeyboardMarkup(resize_keyboard=True).row(button_information_film, button_rec_on_param)
buttons.add(button_rec_for_user)

button_anime = KeyboardButton('–∞–Ω–∏–º–µ')
button_film = KeyboardButton('—Ñ–∏–ª—å–º—ã')
button_serial = KeyboardButton('—Å–µ—Ä–∏–∞–ª—ã')
buttons_type = ReplyKeyboardMarkup(resize_keyboard=True).row(button_anime, button_film)
buttons_type.add(button_serial)


class Choose(StatesGroup):
    film_name = State()
    type_industry = State()


'''
these handlers get the type of industry and the name of the movie, and then contact the api to get the data
'''


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    print(user_id)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã!\n",
                        reply_markup=buttons)
    db_sess = db_session.create_session()
    if db_sess.query(User).filter_by(id=message.from_user.id).count() < 1:
        user = User()
        user.id = message.from_user.id
        db_sess.add(user)
        db_sess.commit()
        db_sess.close()


@dp.message_handler(lambda message: 'üß†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µüß†' in message.text)
async def reaction_buttons_f1(message: types.Message):
    # if message.text == '–ü—Ä–∏–≤–µ—Ç':
    # await message.reply(f'–ø–æ–∫–∞(')
    if message.text == 'üß†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π—Ç–ª–µüß†':
        await message.reply('–ù–∞–ø–∏—à–∏ –º–Ω–µ –æ—Ç—Ä–∞—Å–ª—å –∫–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏', reply_markup=buttons_type)
        await Choose.type_industry.set()

        # full_name, description, year, poster, rating = Films.get_film_information(message)
        # await message.reply('—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    # if message.text == 'üéÅ—Ç–∞–π—Ç–ª –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–ºüéÅ':
    # await message.reply('—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@dp.message_handler(state=Choose.type_industry)
async def get_type_industry(message: types.Message, state: FSMContext):
    if message.text == '–∞–Ω–∏–º–µ':
        type_industry = 'anime'
    elif message.text == '—Ñ–∏–ª—å–º—ã':
        type_industry = 'movie'
    elif message.text == '—Å–µ—Ä–∏–∞–ª—ã':
        type_industry = 'tv-series'
    else:
        await message.reply('–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö', reply_markup=buttons_type)
        type_industry = False
    if type_industry:
        await state.update_data(type_industry=type_industry)
        await message.reply(
            '–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ üåû. –î–ª—è –±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞, —Å–æ–≤–µ—Ç—É—é –Ω–∞–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æü§î',
            reply_markup=ReplyKeyboardRemove())
        await Choose.film_name.set()


@dp.message_handler(state=Choose.film_name)
async def get_film_inf(message: types.Message, state: FSMContext):
    await state.update_data(film=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æüëç, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é –ø–æ–∏—Å–∫')
    data = await state.get_data()
    film = data['film']
    type_industry = data['type_industry']
    await state.finish()
    print('get name')
    full_name, description, year, poster, rating, id_film = Films().get_film_information(film, type_industry)
    if full_name == False:
        await message.reply('–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º', reply_markup=buttons)
    else:
        button_like = InlineKeyboardButton('like', callback_data=f'buttonlikedinf_{id_film}')
        buttons_inline = InlineKeyboardMarkup().add(button_like)
        await bot.send_photo(chat_id=message.chat.id, photo=InputFile('img.png'),
                             caption=f'üåü{full_name}üåü\nüí•{description}üí•\n–≥–æ–¥ - üåú{year}üåõ\n üìà—Ä–µ–π—Ç–∏–Ω–≥ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ - {rating} üìà',
                             reply_markup=buttons_inline, )
        await bot.send_message(chat_id=message.chat.id, text='–µ—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–∞–π—Ç–ª, —Ç—ã –º–æ–∂–µ—à—å –ª–∞–π–∫–Ω—É—Ç—å –µ–≥–æ :)',
                               reply_markup=buttons)
    print(message.from_user.id)


'''
inline like button, creates a new session to the database and checks
if there is a record where id user in telegram == id user in db and id liked film == id film in db ? 
if yes, then it skips, if not, it creates a new record
'''


@dp.callback_query_handler(lambda callback_query: "buttonlikedinf" in callback_query.data)
async def process_callback_buttonlike(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text='–Ø –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ—Ç —Ç–∞–π—Ç–ª –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è :)')
    data = callback_query.data.split('_')[1]
    db_sess = db_session.create_session()
    if db_sess.query(UserToFilm).filter(
            UserToFilm.id == callback_query.from_user.id, UserToFilm.film_id == data).count() < 1:
        print('add new title in db')
        user_to_film = UserToFilm()
        user_to_film.id = callback_query.from_user.id
        user_to_film.film_id = data
        db_sess.add(user_to_film)
        db_sess.commit()
    db_sess.close()
    await callback_query.answer()


def register_handler_f1(dp: Dispatcher):
    dp.register_message_handler(process_start_command, commands=['start'])
    dp.register_message_handler(reaction_buttons_f1)
    dp.register_message_handler(get_type_industry)
    dp.register_message_handler(get_film_inf)
    dp.register_poll_handler(process_callback_buttonlike)
